BEDNY_DATA <- read_csv("data/raw/datalong_CBSAMT.csv")
---
title: Bedny et al. (2019) Data
author: Molly Lewis
date: "`r Sys.Date()`"
output:
html_document:
code_folding: hide
number_sections: no
toc: yes
---
******
```{r setup, include = F}
# load packages
library(rmarkdown)
library(knitr)
library(tidyverse)
library(here)
opts_chunk$set(echo = T, message = F, warning = F,
error = F, tidy = F, cache = F)
```
```{r}
BEDNY_DATA <- read_csv("data/raw/datalong_CBSAMT.csv")
```
---
title: Bedny et al. (2019) Data
author: Molly Lewis
date: "`r Sys.Date()`"
output:
html_document:
code_folding: hide
number_sections: no
toc: yes
---
******
```{r setup, include = F}
# load packages
library(rmarkdown)
library(knitr)
library(tidyverse)
library(here)
opts_chunk$set(echo = T, message = F, warning = F,
error = F, tidy = F, cache = F)
```
```{r}
BEDNY_DATA <- read_csv("data/raw/datalong_CBSAMT.csv")
```
setwd("~/Documents/research/Projects/3_misc/keb_2019_reanalysis/scripts")
library(here)
****
```{r setup, include = F}
# load packages
library(rmarkdown)
library(knitr)
library(tidyverse)
library(here)
opts_chunk$set(echo = T, message = F, warning = F,
error = F, tidy = F, cache = F)
```
```{r}
BEDNY_DATA <- read_csv("data/raw/datalong_CBSAMT.csv")
```
bedny_data <- read_csv(BEDNY_DATA)
BEDNY_DATA <- here("data/raw/datalong_CBSAMT.csv")
bedny_data <- read_csv(BEDNY_DATA)
bedny_data
count(bedny_data, V1, V2, S1, S2)
count(bedny_data, C1, C2, S1, S2)
count(bedny_data, C1, C2, S1, S2) %>% data.frame()
count(bedny_data, C1, C2, S1, S2) %>% data.frame()
glimpse(bedny_data)
count(bedny_data, C1, C2, S1, S2, Category) %>% data.frame()
bedny_data %>%
filter(C1 == "Light", C2 == "Light")
bedny_data %>%
filter(C1 == "Light", C2 == "Light") %>%
select(contains("V"), contains("S"))
bedny_data %>%
filter(C1 == "Light", C2 == "Light") %>%
select(contains("V"), contains("S_"))
bedny_data %>%
filter(C1 == "Light", C2 == "Light") %>%
select(contains("V"), contains("_"))
bedny_data %>%
filter(C1 == "Light", C2 == "Light") %>%
select(contains("V"), contains("_")) %>%
rename(word1 = V1,
word2 = V2)
bedny_data %>%
filter(C1 == "Light", C2 == "Light") %>%
select(contains("V"), contains("_")) %>%
rename(word1 = V1,
word2 = V2) %>%
gather("subject", "raw_similarity", -word1, -word2)
sim_ratings <- bedny_data %>%
filter(C1 == "Light", C2 == "Light") %>%
select(contains("V"), contains("_")) %>%
rename(word1 = V1,
word2 = V2) %>%
gather("subject", "raw_similarity", -word1, -word2)
head(sim_ratings)
sim_ratings <-bedny_data %>%
filter(C1 == "Light", C2 == "Light") %>%
select(contains("V"), contains("_")) %>%
rename(word1 = V1,
word2 = V2) %>%
gather("subject", "raw_similarity", -word1, -word2) %>%
group_by(subject) %>%
mutate(norm_similarity = scale(raw_similarity))
sim_ratings
sim_ratings <-bedny_data %>%
filter(C1 == "Light", C2 == "Light") %>%
select(contains("V"), contains("_")) %>%
rename(word1 = V1,
word2 = V2) %>%
gather("subject_id", "raw_similarity", -word1, -word2) %>%
group_by(subject_id) %>%
mutate(scale_similarity = scale(raw_similarity),
norm_similarity = (scale_similarity - min(scale_similarity))/
(max(scale_similarity) - min(scale_similarity))
)
sim_ratings
sim_ratings %>%
filter(subject_id = "S_01")
sim_ratings %>%
filter(subject_id == "S_01")
sim_ratings %>%
filter(subject_id == "S_01") %>%
summarize(min = min(scale_similarity),
max = max(scale_similarity))
x =  0.255
(x -  -2.07)/(0.836 -  -2.07)
sim_ratings %>%
filter(subject_id == "S_03") %>%
summarize(min = min(scale_similarity),
max = max(scale_similarity))
sim_ratings %>%
filter(subject_id == "S_03")
(     0.262     -  -3.36)/( 0.986 -  -3.36)
sim_ratings
head(sim_ratings)
sim_ratings <-bedny_data %>%
filter(C1 == "Light", C2 == "Light") %>%
select(contains("V"), contains("_")) %>%
rename(word1 = V1,
word2 = V2) %>%
gather("subject_id", "raw_similarity", -word1, -word2) %>%
group_by(subject_id) %>%
mutate(scale_similarity = scale(raw_similarity),
norm_similarity = (scale_similarity - min(scale_similarity))/
(max(scale_similarity) - min(scale_similarity))) %>%
mutate(group_type = case_when(str_detect(subject_id, "CB_")~ "CB",
str_detect(subject_id, "S_")~ "S",
str_detect(subject_id, "AMT_")~ "AMT"))
count(sim_ratings, group_type)
count(sim_ratings %>% ungroup(), group_type)
mean_ratings <- sim_ratings %>%
group_by(group_type, word1, word2) %>%
summarize(norm_similarity = mean(norm_similarity))
mean_ratings
count(mean_ratings, group_type)
count(mean_ratings %>% ungroup(), group_type)
unique(mean_ratings$word1)
unique(mean_ratings$word2)
unique(c(unique(mean_ratings$word1) ,unique(mean_ratings$word2))
)
targ_words <- unique(c(mean_ratings$word1,mean_ratings$word2))
targ_words
15 * 15
sum(1:15)
library(data.table)
targ_words <- unique(c(mean_ratings$word1,mean_ratings$word2))
MODEL_PATH <- "/Users/mollylewis/Documents/research/Projects/1_in_progress/VOCAB_SEEDS/analyses/0_exploration/wiki.en.vec"
wmodel <- fread(
MODEL_PATH,
header = FALSE,
skip = 1,
quote = "",
encoding = "UTF-8",
data.table = TRUE,
col.names = c("target_word",
unlist(lapply(2:301, function(x) paste0("V", x)))))
target_vecs <- wmodel %>%
filter(target_word %in% target_words) %>%
select(target_word, everything())
target_vecs <- wmodel %>%
filter(target_word %in% targ_words) %>%
select(target_word, everything())
target_vecs
head(target_vecs)
# get distances
word_word_dists <- coop::distance(as.matrix(target_vecs[,-1])) %>%
as.data.frame()  %>%
mutate(word1 = target_vecs$target_word)
?coop
library(coop)
# get distances
word_word_dists <- coop::distance(as.matrix(target_vecs[,-1])) %>%
as.data.frame()  %>%
mutate(word1 = target_vecs$target_word)
?coop
`coop-package`
# get distances
word_word_dists <- coop::cosine(as.matrix(target_vecs[,-1])) %>%
as.data.frame()  %>%
mutate(word1 = target_vecs$target_word)
target_vecs
str(target_vecs)
dim(target_vecs)
word_word_dists <- coop::cosine(as.matrix(target_vecs[,-1])) %>%
as.data.frame()
head(word_word_dists)
dim(word_word_dists)
# get distances
word_word_dists <- coop::cosine(t(as.matrix(target_vecs[,-1]))) %>%
as.data.frame()  %>%
mutate(word1 = target_vecs$target_word)
dim(word_word_dists)
colnames(word_word_dists) = c( target_vecs$target_word, "word1")
long_word_word_dists <- gather(word_word_dists, "word2", "language_similarity", -word1) %>%
filter(!(word1 %in% colors),
word2 %in% colors)
long_word_word_dists <- gather(word_word_dists, "word2", "language_similarity", -word1)
long_word_word_dists
sum(1:15)
sum(1:15) -15
mean_ratings
mean_ratings <- sim_ratings %>%
group_by(group_type, word1, word2) %>%
summarize(similarity = mean(norm_similarity))
long_word_word_dists <- gather(word_word_dists, "word2", "similarity", -word1)
head(long_word_word_dists)
long_word_word_dists <- gather(word_word_dists, "word2", "similarity", -word1)  %>%
mutate(group= "language")
```{r}
long_word_word_dists %>%
bind_rows(mean_ratings)
long_word_word_dists <- gather(word_word_dists, "word2", "similarity", -word1)  %>%
mutate(group_type= "language")
long_word_word_dists %>%
bind_rows(mean_ratings)
head(mean_ratings)
long_word_word_dists <- gather(word_word_dists, "word2", "similarity", -word1)
long_word_word_dists <- gather(word_word_dists, "word2", "language_similarity", -word1)
long_word_word_dists
```{r}
mean_ratings %>%
left_join(long_word_word_dists)
mean_ratings
count(mean_ratings, group_type)
count(mean_ratings %>% ungroup, group_type)
ggplot(all_data, aes(x = language_similarity, y = similarity))+
geom_point() +
geom_smooth(method = "lm")
facet_grid(~group_type) +
theme_classic()
all_data <- mean_ratings %>%
left_join(long_word_word_dists)
ggplot(all_data, aes(x = language_similarity, y = similarity))+
geom_point() +
geom_smooth(method = "lm")
facet_grid(~group_type) +
theme_classic()
summary(all_data)
ggplot(all_data, aes(x = language_similarity, y = similarity))+
geom_point() +
geom_smooth(method = "lm") +
facet_grid(~group_type) +
theme_classic()
```
summary(sim_ratings)
head(sim_ratings)
mean_ratings <- sim_ratings %>%
group_by(group_type, word1, word2) %>%
filter(!is.na(norm_similarity))%>%
summarize(similarity = mean(norm_similarity))
mean_ratings
summary(mean_ratings)
```{r}
all_data <- mean_ratings %>%
left_join(long_word_word_dists)
ggplot(all_data, aes(x = language_similarity, y = similarity))+
geom_point() +
geom_smooth(method = "lm") +
facet_grid(~group_type) +
theme_classic()
```
```{r}
all_data %>%
group_by(group_type)%>%
nest()
all_data %>%
group_by(group_type)%>%
nest() %>%
mutate(temp = map_df(data, tidy(cor.test(.$similarity, .$language_similarity))))
library(broom)
all_data %>%
group_by(group_type)%>%
nest() %>%
mutate(temp = map_df(data, tidy(cor.test(.$similarity, .$language_similarity))))
all_data %>%
group_by(group_type)%>%
nest() %>%
mutate(temp = map_df(data, ~tidy(cor.test(.$similarity, .$language_similarity))))
all_data %>%
group_by(group_type)%>%
nest() %>%
mutate(temp = map(data, ~tidy(cor.test(.$similarity, .$language_similarity))))
group_by(group_type)%>%
nest() %>%
mutate(temp = map(data, ~tidy(cor.test(.$similarity, .$language_similarity)))) %>%
select(-data) %>%
unnest()
```{r}
all_data %>%
group_by(group_type)%>%
nest() %>%
mutate(temp = map(data, ~tidy(cor.test(.$similarity, .$language_similarity)))) %>%
select(-data) %>%
unnest()
lm(similarity ~ language_similarity* group_type, data = all_data %>% filter(group_type != "AMT")) %>%
summary()
library(tidyverse)
library(here)
library(data.table)
OUTFILE <- here("data/processed/bedny_2019_lang_distances.csv")
MODEL_PATH <- "/Users/mollylewis/Documents/research/Projects/1_in_progress/VOCAB_SEEDS/analyses/0_exploration/wiki.en.vec"
BEDNY_DATA <- here("data/raw/datalong_CBSAMT.csv")
bedny_data <- read_csv(BEDNY_DATA)
unique(bedny_data$V1)
sim_ratings <-bedny_data %>%
filter(C1 == "Light", C2 == "Light")  %>%
distinct(V1)
sim_ratings
sim_ratings <-bedny_data %>%
filter(C1 == "Light", C2 == "Light")  %>%
distinct(V1, V2)
sim_ratings
sim_ratings <-bedny_data %>%
filter(C1 == "Light", C2 == "Light")  %>%
distinct(V1, V2) %>%
pull(V1, V2)
human_words <-bedny_data %>%
filter(C1 == "Light", C2 == "Light")  %>%
distinct(V1, V2)
targ_words <- unique(c(human_words$V1,human_words$V2))
targ_words
library(tidyverse)
library(here)
library(data.table)
OUTFILE <- here("data/processed/bedny_2019_lang_distances.csv")
MODEL_PATH <- "/Users/mollylewis/Documents/research/Projects/1_in_progress/VOCAB_SEEDS/analyses/0_exploration/wiki.en.vec"
BEDNY_DATA <- here("data/raw/datalong_CBSAMT.csv")
bedny_data <- read_csv(BEDNY_DATA)
human_words <-bedny_data %>%
filter(C1 == "Light", C2 == "Light")  %>%
distinct(V1, V2)
targ_words <- unique(c(human_words$V1,human_words$V2))
target_vecs <- wmodel %>%
filter(target_word %in% targ_words) %>%
select(target_word, everything())
# get distances
word_word_dists <- coop::cosine(t(as.matrix(target_vecs[,-1]))) %>%
as.data.frame()  %>%
mutate(word1 = target_vecs$target_word)
colnames(word_word_dists) = c( target_vecs$target_word, "word1")
long_word_word_dists <- gather(word_word_dists, "word2", "language_similarity", -word1)
write_csv(long_word_word_dists, OUTFILE)
wunique(long_word_word_dists$word1)
unique(long_word_word_dists$word1)
all_data
ggplot(all_data, aes(x = language_similarity, y = similarity))+
#geom_point() +
geom_text(aes(label = word2)) +
ylab("human similarity")+
geom_smooth(method = "lm") +
facet_grid(~group_type) +
theme_classic()
all_data %>%
filter(word1 != "blink") %>%
group_by(group_type)%>%
nest() %>%
mutate(temp = map(data, ~tidy(cor.test(.$similarity, .$language_similarity)))) %>%
select(-data) %>%
unnest()
```
lm(similarity ~ language_similarity* group_type, data = all_data %>% filter(group_type != "AMT") %>% word1 != "blink") %>%
summary()
lm(similarity ~ language_similarity* group_type, data = all_data %>% filter(group_type != "AMT",word1 != "blink") %>%
summary()
lm(similarity ~ language_similarity* group_type, data = all_data %>% filter(group_type != "AMT",word1 != "blink")) %>%
summary()
lm(similarity ~ language_similarity* group_type, data = all_data %>% filter(group_type != "AMT",word1 != "blink")) %>%
summary()
?cor.test
all_data %>%
filter(word1 != "blink", word1 != "blink") %>%
group_by(group_type)%>%
nest() %>%
mutate(temp = map(data, ~tidy(cor.test(.$similarity, .$language_similarity, method = "spearman")))) %>%
select(-data) %>%
unnest()
all_data %>%
group_by(group_type)%>%
nest() %>%
mutate(temp = map(data, ~tidy(cor.test(.$similarity, .$language_similarity,  method = "spearman")))) %>%
select(-data) %>%
unnest()
all_data <- mean_ratings %>%
left_join(long_word_word_dists)
all_data
all_data %>%
filter(group_type != "AMT")
all_data %>%
filter(group_type != "AMT") %>%
select(-language_similarity) %>%
spread(group_type, similarity)
ggplot(cb_s, aes(x = CB, y = S))+
geom_point() +
geom_smooth(method = "lm") +
facet_grid(~group_type) +
theme_classic()
cb_s <- all_data %>%
filter(group_type != "AMT") %>%
select(-language_similarity) %>%
spread(group_type, similarity)
ggplot(cb_s, aes(x = CB, y = S))+
geom_point() +
geom_smooth(method = "lm") +
facet_grid(~group_type) +
theme_classic()
```{r}
cb_s <- all_data %>%
filter(group_type != "AMT") %>%
select(-language_similarity) %>%
spread(group_type, similarity)
ggplot(cb_s, aes(x = CB, y = S))+
geom_point() +
geom_smooth(method = "lm") +
theme_classic()
cor.test(cb_s$S, cb_s$CB)
lm(human_similarity_color~ language_similarity_simple_dist_color*participant_type+
taxo_similarity,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale)) %>%
summary()
