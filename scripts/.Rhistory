group_by(model_type, window_size, language_measure) %>%
nest() %>%
mutate(test = map(data, ~ tidy(cor.test(.x$value,
.x$human_gender_rating)))) %>%
select(-data) %>%
unnest()  %>%
#select(1:7) %>%
mutate(sig = case_when(p.value  < .05  ~ "*", TRUE ~ "")) %>%
arrange(window_size, language_measure)%>%
kable()
lm(human_gender_rating ~ model_type*value,
data = target_data %>% filter(pos == "V") ) %>%
summary()
target_data <-  all_scores_tidy %>%
left_join(freq_data) %>%
filter(dom_po_s_subtlex %in% c("Noun", "Verb","Adjective", "Adverb")) %>%
mutate(pos = case_when(dom_po_s_subtlex == "Noun"~ "N", TRUE ~ "V")) %>%
filter(pos == "V") %>%
filter(window_size == 10)
df = target_data %>%
spread(model_type, value)
r.jk <- cor(df$human_gender_rating, df$kid) # Correlation (age, intelligence)
r.jh <- cor(df$human_gender_rating, df$adult) # Correlation (age, shoe size)
r.kh <- cor(df$adult, df$kid) # cor(df$adult, df$kid)
n <- nrow(df)# Size of the group
cocor::cocor.dep.groups.overlap(r.jk, r.jh, r.kh, n, var.labels=c("human", "kid",
"adult"))
```
freq_data <- read_tsv("/Users/mollylewis/Documents/research/Projects/1_in_progress/VOCAB_SEEDS/analyses/3_kid_vocabs/data/SUBTLEX-US\ frequency\ list\ with\ PoS\ information\ text\ version.txt") %>% janitor::clean_names() %>%
select(word, dom_po_s_subtlex, lg10wf)
target_data <-  all_scores_tidy %>%
left_join(freq_data) %>%
filter(dom_po_s_subtlex %in% c("Noun", "Verb","Adjective", "Adverb")) %>%
mutate(pos = case_when(dom_po_s_subtlex == "Noun"~ "N", TRUE ~ "V")) %>%
filter(pos == "V") %>%
filter(window_size == 10)
target_data %>%
mutate_if(is.numeric, scale) %>%
ggplot(aes( x = value,
y = human_gender_rating,
color = model_type)) +
geom_point(size = .5, alpha = .2)+
geom_smooth(method = "lm") +
theme_classic()
target_data %>%
group_by(model_type, window_size, language_measure) %>%
nest() %>%
mutate(test = map(data, ~ tidy(cor.test(.x$value,
.x$human_gender_rating)))) %>%
select(-data) %>%
unnest()  %>%
#select(1:7) %>%
mutate(sig = case_when(p.value  < .05  ~ "*", TRUE ~ "")) %>%
arrange(window_size, language_measure)%>%
kable()
setwd("~/Documents/research/Projects/3_misc/keb_2019_reanalysis/scripts")
---
title: Distributional semantics as a predictor of human similarity judgments
author: Molly Lewis
date: "`r Sys.Date()`"
output:
html_document:
code_folding: hide
number_sections: no
toc: yes
---
******
```{r setup, include = F}
# load packages
library(rmarkdown)
library(knitr)
library(tidyverse)
library(here)
opts_chunk$set(echo = T, message = F, warning = F,
error = F, tidy = F, cache = F)
```
## Language and human similarity data
For each animal pair, we have human judgements of similarity along 5 dimensions (habitat, food, shape, skin, color) and language estimates of similarity. The human judgements of similarity come from a card sorting task and are at the group level (blind vs. sighted; I think there's also subject level data if we want it).
The language estimates of similarity come from word embedding models. I identified all the unique color words listed by participants in describing the animals (N = 25; I removed a few that were related to visual properties at all, like "water"). Here they are:
`"white"     "black"     "red"       "light"
"gold"      "blue"      "brown"     "dark"
"yellow"    "neutral"   "multi"     "orange"`
`"grey"      "gray"      "medium"    "pattern"
"pink"      "bright"    "patterns"  "spots"
"tan"       "amber"     "stripes"
"tawny"     "ochre"`
Then, for each animal, I created a 25-D vector corresponding to each of the color words. Each value corresponds to the cosine distance between the vector for that animal and the vector for that word. I then calculated the distance between each animal based on these color vectors. I've only done this for color information so far, but in principle we could do this for the other dimensions. I did an analagous thing for the other dimensions.
```{r}
TAXONOMIC_DATA <- here("data/processed/animal_distances_taxonomic.csv")
taxonomic_long <- read_csv(TAXONOMIC_DATA) %>%
rename(taxo_similarity = similarity)
```
# Wiki
```{r}
LANG_ANIMAL_DISTANCE_COLOR <- here("data/processed/animal_color_distances_language_wiki.csv")
LANG_ANIMAL_DISTANCE_SHAPE<- here("data/processed/animal_shape_distances_language_wiki.csv")
LANG_ANIMAL_DISTANCE_TEXTURE <- here("data/processed/animal_texture_distances_language_wiki.csv")
TIDY_HUMAN_PATH <- here("data/processed/tidy_human_data.csv")
language_data <- read_csv(LANG_ANIMAL_DISTANCE_COLOR) %>%
left_join(read_csv(LANG_ANIMAL_DISTANCE_SHAPE), by  = c("animal1", "animal2")) %>%
left_join(read_csv(LANG_ANIMAL_DISTANCE_TEXTURE),by  = c("animal1", "animal2")) %>%
select(-contains("PCA"))
# mutate(language_similarity_simple_dist = -language_similarity_simple_dist)
human_data <- read_csv(TIDY_HUMAN_PATH)
full_sim_data <- full_join(language_data, human_data, by = c("animal1", "animal2"))
human_data_wide <- human_data %>%
unite("measure", c("participant_type", "similarity_type")) %>%
spread(measure, human_similarity)
full_sim_data_wide <- full_join(language_data, human_data_wide,
by = c("animal1", "animal2"))  %>% full_join(taxonomic_long) %>%
filter(animal1 < animal2)
full_sim_data_wide2 <-  full_join(language_data, human_data,
by = c("animal1", "animal2"))    %>%
spread(similarity_type, human_similarity) %>%
full_join(taxonomic_long) %>%
filter(animal1 < animal2)
```
Each data point here is an animal pair
```{r, fig.height = 6}
plot_data <- full_sim_data_wide %>%
select_if(is.numeric)
long_corr <- cor(plot_data,
use = "pairwise.complete.obs") %>%
as.data.frame() %>%
rownames_to_column("v2") %>%
gather("v1", "estimate", -v2)
long_p <- corrplot::cor.mtest(plot_data,
use = "pairwise.complete.obs")$p %>%
as.data.frame(row.names = names(plot_data)) %>%
do(setNames(.,names(plot_data))) %>%
rownames_to_column("v2") %>%
gather("v1", "p", -v2)
corr_df <- full_join(long_corr, long_p) %>%
mutate(estimate_char = case_when(v1 == v2 ~ "",
TRUE ~ as.character(round(estimate,2))),
estimate = case_when(v1 == v2 ~ as.numeric(NA),
TRUE ~ estimate),
estimate_color = case_when(p < .05 ~ estimate, TRUE ~ 0 ))
ggplot(corr_df, aes(v1, fct_rev(v2), fill = estimate_color)) +
geom_tile() + #rectangles for each correlation
#add actual correlation value in the rectangle
geom_text(aes(label = estimate_char), size=3) +
scale_fill_gradient2(low ="blue", mid = "white", high = "red",
midpoint = 0, space = "Lab", guide = "colourbar",
name = "Pearson's r") +
ggtitle("Pairwise Correlation Coefficients") +
theme_classic(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), #, hjust = .95, vjust = .2),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
```
```{r}
lm(human_similarity_color~ language_similarity_simple_dist_color+participant_type +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale)) %>%
summary()
lm(human_similarity_color~language_similarity_simple_dist_color +participant_type *
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale)) %>%
summary()
lm(human_similarity_color~language_similarity_simple_dist_color  +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_color~language_similarity_simple_dist_color  +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "sighted")) %>%
summary()
lm(human_similarity_color~language_similarity_simple_dist_color  + language_similarity_simple_dist_shape +language_similarity_simple_dist_texture +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_color~language_similarity_simple_dist_color  + language_similarity_simple_dist_shape +language_similarity_simple_dist_texture +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "sighted")) %>%
summary()
```
# Google News
```{r}
LANG_ANIMAL_DISTANCE_COLOR <- here("data/processed/animal_color_distances_language_google.csv")
LANG_ANIMAL_DISTANCE_SHAPE<- here("data/processed/animal_shape_distances_language_google.csv")
LANG_ANIMAL_DISTANCE_TEXTURE <- here("data/processed/animal_texture_distances_language_google.csv")
TIDY_HUMAN_PATH <- here("data/processed/tidy_human_data.csv")
language_data <- read_csv(LANG_ANIMAL_DISTANCE_COLOR) %>%
left_join(read_csv(LANG_ANIMAL_DISTANCE_SHAPE), by  = c("animal1", "animal2")) %>%
left_join(read_csv(LANG_ANIMAL_DISTANCE_TEXTURE),by  = c("animal1", "animal2")) %>%
select(-contains("PCA"))
# mutate(language_similarity_simple_dist = -language_similarity_simple_dist)
human_data <- read_csv(TIDY_HUMAN_PATH)
full_sim_data <- full_join(language_data, human_data, by = c("animal1", "animal2"))
human_data_wide <- human_data %>%
unite("measure", c("participant_type", "similarity_type")) %>%
spread(measure, human_similarity)
full_sim_data_wide <- full_join(language_data, human_data_wide,
by = c("animal1", "animal2"))   %>%full_join(taxonomic_long)  %>%
filter(animal1 < animal2)
full_sim_data_wide2 <-  full_join(language_data, human_data,
by = c("animal1", "animal2"))    %>%
spread(similarity_type, human_similarity) %>%
full_join(taxonomic_long) %>%
filter(animal1 < animal2)
```
Each data point here is an animal pair
```{r, fig.height = 6}
plot_data <- full_sim_data_wide %>%
select_if(is.numeric)
long_corr <- cor(plot_data,
use = "pairwise.complete.obs") %>%
as.data.frame() %>%
rownames_to_column("v2") %>%
gather("v1", "estimate", -v2)
long_p <- corrplot::cor.mtest(plot_data,
use = "pairwise.complete.obs")$p %>%
as.data.frame(row.names = names(plot_data)) %>%
do(setNames(.,names(plot_data))) %>%
rownames_to_column("v2") %>%
gather("v1", "p", -v2)
corr_df <- full_join(long_corr, long_p) %>%
mutate(estimate_char = case_when(v1 == v2 ~ "",
TRUE ~ as.character(round(estimate,2))),
estimate = case_when(v1 == v2 ~ as.numeric(NA),
TRUE ~ estimate),
estimate_color = case_when(p < .05 ~ estimate, TRUE ~ 0 ))
ggplot(corr_df, aes(v1, fct_rev(v2), fill = estimate_color)) +
geom_tile() + #rectangles for each correlation
#add actual correlation value in the rectangle
geom_text(aes(label = estimate_char), size=3) +
scale_fill_gradient2(low ="blue", mid = "white", high = "red",
midpoint = 0, space = "Lab", guide = "colourbar",
name = "Pearson's r") +
ggtitle("Pairwise Correlation Coefficients") +
theme_classic(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), #, hjust = .95, vjust = .2),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
```
```{r}
lm(human_similarity_color~ language_similarity_simple_dist_color+participant_type +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale)) %>%
summary()
```
setwd("~/Documents/research/Projects/3_misc/keb_2019_reanalysis/scripts")
---
title: Distributional semantics as a predictor of human similarity judgments
author: Molly Lewis
date: "`r Sys.Date()`"
output:
html_document:
code_folding: hide
number_sections: no
toc: yes
---
******
```{r setup, include = F}
# load packages
library(rmarkdown)
library(knitr)
library(tidyverse)
library(here)
opts_chunk$set(echo = T, message = F, warning = F,
error = F, tidy = F, cache = F)
```
## Language and human similarity data
For each animal pair, we have human judgements of similarity along 5 dimensions (habitat, food, shape, skin, color) and language estimates of similarity. The human judgements of similarity come from a card sorting task and are at the group level (blind vs. sighted; I think there's also subject level data if we want it).
The language estimates of similarity come from word embedding models. I identified all the unique color words listed by participants in describing the animals (N = 25; I removed a few that were related to visual properties at all, like "water"). Here they are:
`"white"     "black"     "red"       "light"
"gold"      "blue"      "brown"     "dark"
"yellow"    "neutral"   "multi"     "orange"`
`"grey"      "gray"      "medium"    "pattern"
"pink"      "bright"    "patterns"  "spots"
"tan"       "amber"     "stripes"
"tawny"     "ochre"`
Then, for each animal, I created a 25-D vector corresponding to each of the color words. Each value corresponds to the cosine distance between the vector for that animal and the vector for that word. I then calculated the distance between each animal based on these color vectors. I've only done this for color information so far, but in principle we could do this for the other dimensions. I did an analagous thing for the other dimensions.
```{r}
TAXONOMIC_DATA <- here("data/processed/animal_distances_taxonomic.csv")
taxonomic_long <- read_csv(TAXONOMIC_DATA) %>%
rename(taxo_similarity = similarity)
```
# Wiki
```{r}
LANG_ANIMAL_DISTANCE_COLOR <- here("data/processed/animal_color_distances_language_wiki.csv")
LANG_ANIMAL_DISTANCE_SHAPE<- here("data/processed/animal_shape_distances_language_wiki.csv")
LANG_ANIMAL_DISTANCE_TEXTURE <- here("data/processed/animal_texture_distances_language_wiki.csv")
TIDY_HUMAN_PATH <- here("data/processed/tidy_human_data.csv")
language_data <- read_csv(LANG_ANIMAL_DISTANCE_COLOR) %>%
left_join(read_csv(LANG_ANIMAL_DISTANCE_SHAPE), by  = c("animal1", "animal2")) %>%
left_join(read_csv(LANG_ANIMAL_DISTANCE_TEXTURE),by  = c("animal1", "animal2")) %>%
select(-contains("PCA"))
# mutate(language_similarity_simple_dist = -language_similarity_simple_dist)
human_data <- read_csv(TIDY_HUMAN_PATH)
full_sim_data <- full_join(language_data, human_data, by = c("animal1", "animal2"))
human_data_wide <- human_data %>%
unite("measure", c("participant_type", "similarity_type")) %>%
spread(measure, human_similarity)
full_sim_data_wide <- full_join(language_data, human_data_wide,
by = c("animal1", "animal2"))  %>% full_join(taxonomic_long) %>%
filter(animal1 < animal2)
full_sim_data_wide2 <-  full_join(language_data, human_data,
by = c("animal1", "animal2"))    %>%
spread(similarity_type, human_similarity) %>%
full_join(taxonomic_long) %>%
filter(animal1 < animal2)
```
Each data point here is an animal pair
```{r, fig.height = 6}
plot_data <- full_sim_data_wide %>%
select_if(is.numeric)
long_corr <- cor(plot_data,
use = "pairwise.complete.obs") %>%
as.data.frame() %>%
rownames_to_column("v2") %>%
gather("v1", "estimate", -v2)
long_p <- corrplot::cor.mtest(plot_data,
use = "pairwise.complete.obs")$p %>%
as.data.frame(row.names = names(plot_data)) %>%
do(setNames(.,names(plot_data))) %>%
rownames_to_column("v2") %>%
gather("v1", "p", -v2)
corr_df <- full_join(long_corr, long_p) %>%
mutate(estimate_char = case_when(v1 == v2 ~ "",
TRUE ~ as.character(round(estimate,2))),
estimate = case_when(v1 == v2 ~ as.numeric(NA),
TRUE ~ estimate),
estimate_color = case_when(p < .05 ~ estimate, TRUE ~ 0 ))
ggplot(corr_df, aes(v1, fct_rev(v2), fill = estimate_color)) +
geom_tile() + #rectangles for each correlation
#add actual correlation value in the rectangle
geom_text(aes(label = estimate_char), size=3) +
scale_fill_gradient2(low ="blue", mid = "white", high = "red",
midpoint = 0, space = "Lab", guide = "colourbar",
name = "Pearson's r") +
ggtitle("Pairwise Correlation Coefficients") +
theme_classic(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), #, hjust = .95, vjust = .2),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
```
```{r}
lm(human_similarity_color~ language_similarity_simple_dist_color+participant_type +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale)) %>%
summary()
lm(human_similarity_color~language_similarity_simple_dist_color +participant_type *
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale)) %>%
summary()
lm(human_similarity_color~language_similarity_simple_dist_color  +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_color~language_similarity_simple_dist_color  +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "sighted")) %>%
summary()
lm(human_similarity_color~language_similarity_simple_dist_color  + language_similarity_simple_dist_shape +language_similarity_simple_dist_texture +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_color~language_similarity_simple_dist_color  + language_similarity_simple_dist_shape +language_similarity_simple_dist_texture +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "sighted")) %>%
summary()
```
# Google News
```{r}
LANG_ANIMAL_DISTANCE_COLOR <- here("data/processed/animal_color_distances_language_google.csv")
LANG_ANIMAL_DISTANCE_SHAPE<- here("data/processed/animal_shape_distances_language_google.csv")
LANG_ANIMAL_DISTANCE_TEXTURE <- here("data/processed/animal_texture_distances_language_google.csv")
TIDY_HUMAN_PATH <- here("data/processed/tidy_human_data.csv")
language_data <- read_csv(LANG_ANIMAL_DISTANCE_COLOR) %>%
left_join(read_csv(LANG_ANIMAL_DISTANCE_SHAPE), by  = c("animal1", "animal2")) %>%
left_join(read_csv(LANG_ANIMAL_DISTANCE_TEXTURE),by  = c("animal1", "animal2")) %>%
select(-contains("PCA"))
# mutate(language_similarity_simple_dist = -language_similarity_simple_dist)
human_data <- read_csv(TIDY_HUMAN_PATH)
full_sim_data <- full_join(language_data, human_data, by = c("animal1", "animal2"))
human_data_wide <- human_data %>%
unite("measure", c("participant_type", "similarity_type")) %>%
spread(measure, human_similarity)
full_sim_data_wide <- full_join(language_data, human_data_wide,
by = c("animal1", "animal2"))   %>%full_join(taxonomic_long)  %>%
filter(animal1 < animal2)
full_sim_data_wide2 <-  full_join(language_data, human_data,
by = c("animal1", "animal2"))    %>%
spread(similarity_type, human_similarity) %>%
full_join(taxonomic_long) %>%
filter(animal1 < animal2)
```
Each data point here is an animal pair
```{r, fig.height = 6}
plot_data <- full_sim_data_wide %>%
select_if(is.numeric)
long_corr <- cor(plot_data,
use = "pairwise.complete.obs") %>%
as.data.frame() %>%
rownames_to_column("v2") %>%
gather("v1", "estimate", -v2)
long_p <- corrplot::cor.mtest(plot_data,
use = "pairwise.complete.obs")$p %>%
as.data.frame(row.names = names(plot_data)) %>%
do(setNames(.,names(plot_data))) %>%
rownames_to_column("v2") %>%
gather("v1", "p", -v2)
corr_df <- full_join(long_corr, long_p) %>%
mutate(estimate_char = case_when(v1 == v2 ~ "",
TRUE ~ as.character(round(estimate,2))),
estimate = case_when(v1 == v2 ~ as.numeric(NA),
TRUE ~ estimate),
estimate_color = case_when(p < .05 ~ estimate, TRUE ~ 0 ))
ggplot(corr_df, aes(v1, fct_rev(v2), fill = estimate_color)) +
geom_tile() + #rectangles for each correlation
#add actual correlation value in the rectangle
geom_text(aes(label = estimate_char), size=3) +
scale_fill_gradient2(low ="blue", mid = "white", high = "red",
midpoint = 0, space = "Lab", guide = "colourbar",
name = "Pearson's r") +
ggtitle("Pairwise Correlation Coefficients") +
theme_classic(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), #, hjust = .95, vjust = .2),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks = element_blank(),
legend.position = "none")
```
```{r}
lm(human_similarity_color~ language_similarity_simple_dist_color+participant_type +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale)) %>%
summary()
```
lm(human_similarity_color~ language_similarity_simple_dist_color+participant_type *
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale)) %>%
summary()
lm(human_similarity_color~ language_similarity_simple_dist_color*participant_type+participant_type *
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale)) %>%
summary()
lm(human_similarity_color~ language_similarity_simple_dist_color+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_color~ language_similarity_simple_dist_color+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "sighted")) %>%
summary()
lm(human_similarity_color~ language_similarity_simple_dist_color+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
names(full_sim_data_wide2)
lm(human_similarity_shape ~ language_similarity_simple_dist_shape+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_shape~ language_similarity_simple_dist_shape+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "sighted")) %>%
summary()
lm(human_similarity_color~ language_similarity_simple_dist_color+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "sighted")) %>%
summary()
lm(human_similarity_shape ~ language_similarity_simple_dist_shape+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_shape~ language_similarity_simple_dist_shape+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "sighted")) %>%
summary()
# shape
lm(human_similarity_skin ~ language_similarity_simple_dist_texture+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_skin~ language_similarity_simple_dist_texture+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "sighted")) %>%
summary()
lm(human_similarity_skin ~ language_similarity_simple_dist_texture+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_skin~ language_similarity_simple_dist_texture+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "sighted")) %>%
summary()
# shape
lm(human_similarity_shape ~ language_similarity_simple_dist_shape+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_shape~ language_similarity_simple_dist_shape+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "sighted")) %>%
summary()
# texture
lm(human_similarity_skin ~ language_similarity_simple_dist_texture+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_skin~ language_similarity_simple_dist_texture+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "sighted")) %>%
summary()
lm(human_similarity_color~ language_similarity_simple_dist_color+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_color~ language_similarity_simple_dist_color+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_color~ language_similarity_simple_dist_color+
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
head(full_sim_data_wide2)
full_sim_data_wide2$taxo_similarity
names(full_sim_data_wide2)
# color
lm(human_similarity_color~ language_similarity_simple_dist_color+language_similarity_simple_dist_shape + language_similarity_simple_dist_texture +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_shape~ language_similarity_simple_dist_color+language_similarity_simple_dist_shape + language_similarity_simple_dist_texture +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_skin~ language_similarity_simple_dist_color+language_similarity_simple_dist_shape + language_similarity_simple_dist_texture +
taxo_similarity  ,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_skin~ language_similarity_simple_dist_texture +
,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_skin~ language_similarity_simple_dist_texture
,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
lm(human_similarity_color~ language_similarity_simple_dist_color
,  data = full_sim_data_wide2 %>% mutate_if(is.numeric, scale) %>% filter(participant_type == "blind")) %>%
summary()
